import json

from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from src.entities.setting.service import setting_service
from src.keyboards.processing import (
    get_menu_processing, with_setting, menu_link_keyboard, delete_word_keyboard, postscript_menu_keyboard
)


router = Router()


@router.callback_query(F.data.startswith("settings_in_channel__"))
async def open_setting_menu(call: CallbackQuery):
    receiver_channel_id = call.data.split("__")[-1]
    setting = await setting_service.get_settings(receiver_channel_id)
    print(setting)
    await call.message.edit_text(
        "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª, –∫–∞–∫ –≤–∞–º –∑–∞—Ö–æ—á–µ—Ç—Å—è:",
        reply_markup=get_menu_processing(int(receiver_channel_id), setting)
    )


class LinkReceiverForm(StatesGroup):
    get_link_ = State()


@router.callback_query(F.data.startswith("menu_link__"))
async def link_menu(call: CallbackQuery, state: FSMContext):
    receiver_channel_id = call.data.split("__")[-1]
    setting = await setting_service.get_settings(receiver_channel_id)
    await call.message.edit_text(
        f"–í–∞—à–∞ –∑–∞–º–µ–Ω—è—é—â–∞—è —Å—Å—ã–ª–∫–∞: {setting.link}",
        reply_markup=menu_link_keyboard(int(receiver_channel_id), setting),
        disable_web_page_preview=True
    )
    await call.answer()


@router.callback_query(F.data.startswith("change_link__"))
async def ask_link(call: CallbackQuery, state: FSMContext):
    receiver_channel_id = call.data.split("__")[-1]
    await call.message.answer("–°–∫–∏–Ω—å—Ç–µ —Å—Å—ã–ª–∫—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —è –±—É–¥—É –∑–∞–º–µ–Ω—è—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–æ—Å—Ç–µ  üëáüëáüëá")
    await state.set_state(LinkReceiverForm.get_link_)
    await state.update_data(receiver_channel_id=receiver_channel_id)


@router.message(LinkReceiverForm.get_link_, F.text)
async def get_link(message: Message, state: FSMContext):
    data = await state.get_data()
    await setting_service.add_link(message.text, data["receiver_channel_id"])
    await message.answer(
        "–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ  ‚úÖ",
        reply_markup=with_setting(data["receiver_channel_id"])
    )
    await state.clear()


@router.callback_query(F.data.startswith("toggle_link__"))
async def toggle_link(call: CallbackQuery):
    receiver_channel_id = call.data.split("__")[-1]
    status = await setting_service.toggle_setting(receiver_channel_id)
    setting = await setting_service.get_settings(receiver_channel_id)
    await call.message.edit_text(
        f"–í–∞—à–∞ –∑–∞–º–µ–Ω—è—é—â–∞—è —Å—Å—ã–ª–∫–∞: {setting.link}",
        reply_markup=menu_link_keyboard(int(receiver_channel_id), status),
        disable_web_page_preview=True
    )
    if status:
        await call.answer("–ê–≤—Ç–æ–ø–æ–¥–º–µ–Ω–∞ —Å—Å—ã–ª–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞")
    else:
        await call.answer("–ê–≤—Ç–æ–ø–æ–¥–º–µ–Ω–∞ —Å—Å—ã–ª–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω–∞")


@router.callback_query(F.data.startswith("delete_word_posts__"))
async def menu_delete_words(call: CallbackQuery):
    receiver_channel_id = call.data.split("__")[-1]
    setting = await setting_service.get_settings(receiver_channel_id)
    try:
        deleted_words = setting.deleted_key_words.split("&&")
    except AttributeError:
        deleted_words = []
    print("–°–ª–æ–≤–∞:", deleted_words)
    delete_string = ""
    if deleted_words != "null":
        index = 1
        for deleted_word in deleted_words:
            delete_string += f"<b>{index}.</b>  <code>{deleted_word}</code>\n"
            index += 1
    else:
        delete_string = "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤."
    await call.message.edit_text(
        "–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –ø–æ—Å—Ç–æ–≤:\n\n"
        f"{delete_string}",
        reply_markup=delete_word_keyboard(int(receiver_channel_id))
    )


class DeleteWordForm(StatesGroup):
    get_add_words = State()
    get_delete_words = State()


@router.callback_query(F.data.startswith("add_delete_word__"))
async def ask_delete_word(call: CallbackQuery, state: FSMContext):
    receiver_channel_id = call.data.split("__")[-1]
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ (–∏–ª–∏ —Ñ—Ä–∞–∑—ã) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ —è –¥–æ–±–∞–≤–ª—é –∏—Ö –≤ —Å–ø–∏—Å–æ–∫:"
    )
    await state.set_state(DeleteWordForm.get_add_words)
    await state.update_data(receiver_channel_id=receiver_channel_id)
    await call.answer()


@router.message(DeleteWordForm.get_add_words, F.text)
async def ask_delete_word(message: Message, state: FSMContext):
    data = await state.get_data()
    receiver_channel_id = data["receiver_channel_id"]
    words = message.text.split(",")
    words = [word.strip() for word in words]
    words = [word for word in words if len(word) > 0]
    words = await setting_service.add_words(words, receiver_channel_id)
    await message.answer("–°–ª–æ–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ  ‚úÖ")

    delete_string = ""
    if words:
        index = 1
        for deleted_word in words:
            delete_string += f"<b>{index}.</b>  <code>{deleted_word}</code>\n"
            index += 1
    else:
        delete_string = "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤."
    await message.answer(
        "–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –ø–æ—Å—Ç–æ–≤:\n\n"
        f"{delete_string}",
        reply_markup=delete_word_keyboard(int(receiver_channel_id))
    )


@router.callback_query(F.data.startswith("delete_delete_word__"))
async def ask_delete_del_word(call: CallbackQuery, state: FSMContext):
    receiver_channel_id = call.data.split("__")[-1]
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ (–∏–ª–∏ —Ñ—Ä–∞–∑—ã) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ —è —É–¥–∞–ª—é –∏—Ö –∏–∑ —Å–ø–∏—Å–∫–∞:"
    )
    await state.set_state(DeleteWordForm.get_delete_words)
    await state.update_data(receiver_channel_id=receiver_channel_id)
    await call.answer()


@router.message(DeleteWordForm.get_delete_words, F.text)
async def d_delete_word(message: Message, state: FSMContext):
    data = await state.get_data()
    receiver_channel_id = data["receiver_channel_id"]
    words = message.text.split(",")
    words = [word.strip() for word in words]
    words = [word for word in words if len(word) > 0]
    new_word = await setting_service.delete_words(words, receiver_channel_id)
    await message.answer("–°–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ  ‚úÖ")

    delete_string = ""
    if new_word:
        index = 1
        for deleted_word in new_word:
            delete_string += f"<b>{index}.</b>  <code>{deleted_word}</code>\n"
            index += 1
    else:
        delete_string = "–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏–∫–∞–∫–∏—Ö —Å–ª–æ–≤."
    await message.answer(
        "–í–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è –∏–∑ –ø–æ—Å—Ç–æ–≤:\n\n"
        f"{delete_string}",
        reply_markup=delete_word_keyboard(int(receiver_channel_id))
    )


@router.callback_query(F.data.startswith("postscript_post__"))
async def open_postscript_menu(call: CallbackQuery):
    receiver_channel_id = call.data.split("__")[-1]
    setting = await setting_service.get_settings(receiver_channel_id)
    postscript = setting.postscript if setting.postscript else '–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å.'
    print(postscript)
    await call.message.answer(
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å:\n\n"
        f"{postscript}",
        reply_markup=postscript_menu_keyboard(int(receiver_channel_id)),
        disable_web_page_preview=True
    )
    await call.answer()


class PostscriptForm(StatesGroup):
    get_postscript = State()


@router.callback_query(F.data.startswith("change_postscript__"))
async def ask_new_postscript(call: CallbackQuery, state: FSMContext):
    receiver_channel_id = call.data.split("__")[-1]
    await call.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞. \n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª."
    )
    await state.set_state(PostscriptForm.get_postscript)
    await state.update_data(receiver_channel_id=receiver_channel_id)
    await call.answer()


@router.message(PostscriptForm.get_postscript)
async def get_postscript(message: Message, state: FSMContext):
    data = await state.get_data()
    receiver_channel_id = data["receiver_channel_id"]
    await setting_service.add_postscript(message.html_text, int(receiver_channel_id))
    await message.answer("–ü–æ–¥–ø–∏—Å—å –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞  ‚úÖ")
    await state.clear()
    await message.answer(
        "–í–∞—à–∞ –ø–æ–¥–ø–∏—Å—å:\n\n"
        f"{message.html_text if message.html_text else '–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø–æ–¥–ø–∏—Å—å'}",
        reply_markup=postscript_menu_keyboard(int(receiver_channel_id)),
        disable_web_page_preview=True
    )
