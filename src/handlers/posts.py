from aiogram import Router, Bot, F
from aiogram.filters import Command
from aiogram.filters.chat_member_updated import ChatMemberUpdatedFilter, IS_NOT_MEMBER, ADMINISTRATOR
from aiogram.types import Message, ChatMemberUpdated, CallbackQuery

from src.entities.parsed_channels.service import parsed_channel_service
from src.entities.receiver_channels.service import receiver_channel_service
from src.keyboards.basic import after_added_in_channel_keyboard, add_more_out_channel_keyboard
from src.entities.setting.service import setting_service


router = Router()


F: Message


@router.channel_post(F.text.startswith("userbot__error__"))
async def error_by_add(message: Message, bot: Bot):
    error_type, user_id = message.text.split("__")[2:]
    if error_type == "invalid":
        await bot.send_message(
            user_id,
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞  ‚ùå\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë üëáüëáüëá",
            reply_markup=add_more_out_channel_keyboard()
        )
    elif error_type == "notfound":
        await bot.send_message(
            user_id,
            "–¢–∞–∫–æ–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω  ‚ùå\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë üëáüëáüëá",
            reply_markup=add_more_out_channel_keyboard()
        )


@router.channel_post(F.text.startswith("userbot__add__"))
async def get_and_add_channel_post(message: Message, bot: Bot):
    print("–ü–û–õ–£–ß–ê–ï–ú!")
    channel_id, channel_username, user_id = message.text.split("__")[-3:]
    user_id = int(user_id)
    channel_id = int(channel_id)

    await parsed_channel_service.add_parsed_channel(channel_id, channel_username)
    await parsed_channel_service.bound_with_user(channel_id, channel_username, user_id)
    await bot.send_message(
        user_id,
        "–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ \"–ü–∞—Ä—Å–µ—Ä —Å–ø–∏—Å–æ–∫\"  ‚úÖ",
        reply_markup=add_more_out_channel_keyboard()
    )


@router.message(Command("new_receiver_channel"))
async def get_added_to_receiver_channel(message: Message):
    await message.answer("–ß—Ç–æ–±—ã —è –º–æ–≥ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ, —Å–¥–µ–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ:\n\n"
                         "<b>1.</b> –î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ –≤–∞—à –∫–∞–Ω–∞–ª\n"
                         "<b>2.</b> –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                         "–ü–æ—Å–ª–µ —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —è –æ—Ç–ø–∏—à—É –≤–∞–º, —á—Ç–æ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=ADMINISTRATOR))
async def bot_added_as_admin(event: ChatMemberUpdated, bot: Bot):
    await bot.send_message(
        event.from_user.id,
        f"–£—Å–ø–µ—à–Ω–æ! –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–µ–Ω—è –≤ <b>{event.chat.title}</b>!",
        reply_markup=after_added_in_channel_keyboard(event.chat.id)
    )
    await receiver_channel_service.add_receiver_channel(event.chat.id, event.chat.title, event.from_user.id)
    link = None
    if event.chat.username:
        link = f"https://t.me/{event.chat.username}"
    await setting_service.create_setting(
        event.chat.id, link
    )


@router.message(Command("delete_receiver_channel"))
async def get_added_to_receiver_channel(message: Message):
    await message.answer(
        "–ß—Ç–æ–±—ã —è –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Å—Ç—ã –≤ –≤–∞—à –∫–∞–Ω–∞–ª, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—è –æ—Ç —Ç—É–¥–∞.\n\n"
        "–Ø —Å–æ–æ–±—â—É –≤–∞–º —Å—Ä–∞–∑—É –∂–µ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è."
    )


@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=IS_NOT_MEMBER))
async def bot_deleted(event: ChatMemberUpdated, bot: Bot):
    await bot.send_message(
        event.from_user.id,
        f"–í—ã —É–¥–∞–ª–∏–ª–∏ –º–µ–Ω—è –∏–∑ –≥—Ä—É–ø–ø—ã <b>{event.chat.title}</b>!"
    )
    await receiver_channel_service.delete_receiver_channel(event.chat.id)
